<template>
  <div class="wrapper">
    <!-- 登录容器 -->
    <div
      class="login-container"
      role="form"
      aria-label="登录表单"
      if="isLoginVisible"
    >
      <text class="title">欢迎登录</text>
      <div class="input-group">
        <label target="username" aria-label="用户名">用户名:</label>
        <input
          type="text"
          placeholder="请输入用户名"
          id="username"
          model:value="{{loginUsername}}"
          aria-label="请输入用户名"
        />
      </div>

      <div class="input-group password">
        <label target="password" aria-label="密码">密码:</label>
        <input
          type="password"
          placeholder="请输入密码"
          id="password"
          model:value="{{loginPassword}}"
          aria-label="请输入密码"
        />
      </div>

      <div class="message" id="login_message" style="display: none"></div>
      <text id="login_button" aria-label="登录" @click="handleLogin">登录</text>
      <text class="register-link">
        还没有账号？<a id="go_to_register" @click="handleLoginVisible"
          >点击注册</a
        >
      </text>
    </div>

    <!-- 注册容器 -->
    <div class="register-container" role="form" aria-label="注册表单" else>
      <text class="title">用户注册</text>
      <div class="input-group">
        <label target="register_username" aria-label="用户名">用户名:</label>
        <input
          type="text"
          placeholder="请输入用于登录的用户名"
          id="register_username"
          model:value="{{registerUsername}}"
          aria-label="请输入用于登录的用户名"
        />
      </div>

      <div class="input-group">
        <label target="register_nickname" aria-label="昵称">昵称:</label>
        <input
          type="text"
          placeholder="请输入用于显示的昵称"
          id="register_nickname"
          model:value="{{registerNickname}}"
          aria-label="请输入用于显示的昵称"
        />
      </div>

      <div class="input-group">
        <label target="register_password" aria-label="密码">密码:</label>
        <input
          type="password"
          placeholder="请输入密码"
          id="register_password"
          model:value="{{registerPassword}}"
          aria-label="请输入密码"
        />
      </div>

      <div class="input-group">
        <label target="register_confirm_password" aria-label="确认密码"
          >确认密码:</label
        >
        <input
          type="password"
          placeholder="请再次输入密码"
          id="register_confirm_password"
          model:value="{{registerConfirmPassword}}"
          aria-label="请再次输入密码"
        />
      </div>

      <div class="message" id="register_message" style="display: none"></div>
      <text id="register_button" aria-label="注册" @click="handleRegister"
        >注册</text
      >
      <text class="login-link">
        已有账号？<a id="back_to_login" @click="handleLoginVisible">返回登录</a>
      </text>
    </div>
  </div>
</template>

<script>
import router from '@system.router'
import storageUtils from '../../helper/storageUtils'
import SHA256 from '../../helper/secretUtils'
import utils from '../../helper/utils'
import webviewUtils from '../../helper/webviewUtils'

export default {
  data: {
    loginUsername: "",
    loginPassword: "",
    registerUsername: "",
    registerNickname: "",
    registerPassword: "",
    registerConfirmPassword: "",
    isLoginVisible: true,
  },

  onInit() {
    storageUtils.clearAll();
    webviewUtils.deleteCookie("token");
    webviewUtils.deleteCookie("username");
    webviewUtils.deleteCookie("nickname");
  },

  async onShow() {
    await this.checkAuthAndRedirect();
  },

  handleLoginVisible() {
    this.isLoginVisible = !this.isLoginVisible;
  },

  async handleLogin() {
    storageUtils.saveData("loginUsername", this.loginUsername)
    storageUtils.saveData("loginPassword", this.loginPassword)

    if (!this.loginUsername || !this.loginPassword) {
      console.log("用户名和密码不能为空")
      utils.showToast("用户名和密码不能为空")
      return;
    }

    try {
      const encryptedPassword = SHA256(this.loginPassword);

      const response = await $apis.visionvoice.login({
        data: {
          username: this.loginUsername,
          password: encryptedPassword
        },
        header: {
          "Content-Type": "application/json"
        }
      });

      console.log("[login][handleLogin] response:", response);
      const data = JSON.parse(response.data.data);
      console.log("[login][handleLogin] data:", data);
      utils.showToast(data.message);

      if (response.data.code === 200) {
        storageUtils.saveData("token", data.access_token);
        storageUtils.saveData("username", this.loginUsername);
        storageUtils.saveData("nickname", data.user_info.nickname);

        router.replace({
          uri: "/pages/Content",
          // uri: "https://pineapplesnowy.cn/",
          params: {
            ___PARAM_PAGE_ANIMATION___: {
              openEnter: 'none',
              closeEnter: 'slide',
              openExit: 'slide',
              closeExit: 'slide'
            }
          }
        });
      }
    } catch (error) {
      console.error('Error:', error);
    }
  },

  async handleRegister() {

    if (!this.registerNickname || !this.registerUsername || !this.registerPassword || !this.registerConfirmPassword) {
      utils.showToast("请填写完整信息");
      return;
    }

    if (this.registerPassword !== this.registerConfirmPassword) {
      utils.showToast("两次输入的密码不一致，请重新输入");
      return;
    }

    try {
      const encryptedPassword = SHA256(this.registerPassword);

      const response = await $apis.visionvoice.register({
        data: {
          username: this.registerUsername,
          password: encryptedPassword,
          nickname: this.registerNickname
        },
        header: {
          'Content-Type': 'application/json'
        },
      });
      console.log("[register][handleRegister] response:", response);
      const data = JSON.parse(response.data.data);
      console.log("[register][handleRegister] data:", data);
      utils.showToast(data.message);

      if (response.data.code === 200) {
        storageUtils.saveData("token", data.access_token);
        storageUtils.saveData("username", this.registerUsername);
        storageUtils.saveData("nickname", data.user_info.nickname);

        router.replace({
          // uri: "https://pineapplesnowy.cn/",
          uri: "/pages/Content",
          params: {
            ___PARAM_PAGE_ANIMATION___: {
              openEnter: 'none',
              closeEnter: 'slide',
              openExit: 'slide',
              closeExit: 'slide'
            }
          }
        });
      }
    } catch (error) {
      console.error('Error:', error);
      utils.showToast("注册失败，请重试");
    }
  },

  async checkAuthAndRedirect() {
    const token = await storageUtils.getData("token");
    console.log("[login][checkAuth] token:", token);
    if (!token) {
      utils.showToast("请先登录");
      return;
    }
    const response = await $apis.visionvoice.verifyToken({
      header: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    });
    const data = JSON.parse(response.data.data);
    console.log("[login][checkAuth] data:", data);
    if (data.valid) {
      router.replace({
        uri: "/pages/Content",
        params: {
          ___PARAM_PAGE_ANIMATION___: {
            openEnter: 'none',
            closeEnter: 'slide',
            openExit: 'slide',
            closeExit: 'slide'
          }
        }
      });
    }
  }
}
</script>

<style lang="less">
@import './../../assets/styles/style.less';

.wrapper {
  justify-content: center;
  align-items: center;
  box-sizing: border-box;
  background-image: url('./../../assets/images/background.jpg');
  background-size: cover;
}

/* ----- 登录容器样式 ----- */

.input-group {
  flex-direction: column;
  margin-bottom: 1.5 * @size-factor;
}

label {
  display: block;
  color: #fff;
  margin-bottom: 0.33 * @size-factor;
}

input {
  width: 100%;
  padding: 0.66 * @size-factor;
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 5px;
  background-color: rgba(255, 255, 255, 0.1);
  color: #fff;
  font-size: 1 * @size-factor;
}

input:focus {
  outline: none;
  border-color: #5b61b9;
}

/* 登录和注册共有的样式 start
----------------------------------- */
/* ----- 容器样式 ----- */
.login-container,
.register-container {
  flex-direction: column;
  background-color: rgba(33, 31, 31, 0.8);
  padding: @size-factor;
  border-radius: 10px;
  width: 18 * @size-factor;
  backdrop-filter: blur(10px);
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
  .title {
    color: #fff;
    text-align: center;
    font-size: 1.5 * @size-factor;
    margin-bottom: 1.5 * @size-factor;
  }
  /* 按钮 */
  #login_button,
  #register_button {
    width: 100%;
    padding: 12px;
    background-color: #5b61b9;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1.5 * @size-factor;
    margin-bottom: @size-factor;
    text-align: center;
  }

  #login_button:hover,
  #register_button:hover {
    background-color: #44498c;
  }

  /* 链接 */
  .login-link,
  .register-link {
    text-align: center;
    color: #fff;
    margin: 0;
    font-size: 1 * @size-factor;
  }

  .login-link a,
  .register-link a {
    color: #5b61b9;
    text-decoration: none;
  }

  .login-link a:hover,
  .register-link a:hover {
    text-decoration: underline;
  }
}

/* 登录和注册共有的样式 end
----------------------------------- */

/* ----- 消息提示样式 start ----- */
.message {
  text-align: center;
  margin-bottom: 10px;
  padding: 5px;
  border-radius: 4px;
}

.message.success {
  color: #4caf50;
}

.message.error {
  color: #f44336;
}
/* ----- 消息提示样式 end ----- */
</style>